services:
  # app:
  #   build: ./downloader
  #   command: python cadaster.py
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./downloader:/app
  #     - /mnt/HC_Volume_35080261/cadaster:/cadaster
  #   depends_on:
  #     - keygen
  # restart: unless-stopped

  cadaster:
    build: ./cadaster
    # command: /venv/bin/python -m debugpy --listen 0.0.0.0:3000 --wait-for-client main.py
    environment:
      - REDIS_URI=redis://redis:6379/4
    # ports:
    #   - 3023:3000
    volumes:
      # - ./cadaster:/app
      - ./cadaster/logs:/app/logs
      - /mnt/HC_Volume_35080261/cadaster:/cadaster
      - ./cadaster/data.db:/app/data.db

  # nocodb:
  #   image: "nocodb/nocodb:latest"
  #   restart: unless-stopped
  #   volumes:
  #     - "./nc.data:/usr/app/data"
  #     - ./cadaster/data.db:/usr/app/data/data.db
  #   networks:
  #     - traefik-net
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.${PROJECT_NAME}nc.entrypoints=web"
  #     - "traefik.http.routers.${PROJECT_NAME}nc.rule=Host(`nc${DOMAIN}`)"
  #     - "traefik.http.routers.${PROJECT_NAME}nc.middlewares=https-redirect"
  #     - "traefik.http.routers.${PROJECT_NAME}nc-secure.entrypoints=websecure"
  #     - "traefik.http.routers.${PROJECT_NAME}nc-secure.rule=Host(`nc${DOMAIN}`)"
  #     - "traefik.http.routers.${PROJECT_NAME}nc-secure.tls=true"
  #     - "traefik.http.routers.${PROJECT_NAME}nc-secure.tls.certresolver=letsencrypt"
  #     - "traefik.http.services.${PROJECT_NAME}nc.loadbalancer.server.port=8080"
  #     - "traefik.docker.network=traefik-net"

  serve:
    image: joseluisq/static-web-server:2
    restart: unless-stopped
    environment:
      # Note: those envs are customizable but also optional
      # - SERVER_HOST=127.0.0.1
      - SERVER_PORT=80
      - SERVER_ROOT=/public
      - SERVER_DIRECTORY_LISTING=true
    volumes:
      - /mnt/HC_Volume_35080261/cadaster:/public
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${PROJECT_NAME}.entrypoints=web"
      - "traefik.http.routers.${PROJECT_NAME}.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}.middlewares=https-redirect"
      - "traefik.http.routers.${PROJECT_NAME}-secure.entrypoints=websecure"
      - "traefik.http.routers.${PROJECT_NAME}-secure.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}-secure.tls=true"
      - "traefik.http.routers.${PROJECT_NAME}-secure.tls.certresolver=letsencrypt"
      - "traefik.http.services.${PROJECT_NAME}.loadbalancer.server.port=80"
      - "traefik.docker.network=traefik-net"

  web:
    build: ./leaflet
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${PROJECT_NAME}w.entrypoints=web"
      - "traefik.http.routers.${PROJECT_NAME}w.rule=Host(`w${DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}w.middlewares=https-redirect"
      - "traefik.http.routers.${PROJECT_NAME}w-secure.entrypoints=websecure"
      - "traefik.http.routers.${PROJECT_NAME}w-secure.rule=Host(`w${DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}w-secure.tls=true"
      - "traefik.http.routers.${PROJECT_NAME}w-secure.tls.certresolver=letsencrypt"
      - "traefik.http.services.${PROJECT_NAME}w.loadbalancer.server.port=3000"
      - "traefik.docker.network=traefik-net"

  keygen:
    build: ./keygen
    command: npm start
    restart: unless-stopped
    volumes:
      - ./keygen:/app
    # ports:
    #   - 3000:3000

  redis:
    image: redis:alpine
    restart: unless-stopped
    # ports:
    #   - 6379:6379
    volumes:
      - ./redis.data:/data

networks:
  traefik-net:
    external: true
